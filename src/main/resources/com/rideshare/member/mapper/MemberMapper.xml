<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rideshare.member.mapper.MemberMapper">
    <insert id="join" useGeneratedKeys="true" keyProperty="mId">
        insert into member
            (id, pw, nickname, email, auth_code, auth_status, authority)
        values
            (#{id}, #{pw}, #{nickname}, #{email}, #{authCode}, #{authStatus}, #{authority})
    </insert>

    <select id="findAuthCodeById" resultType="int">
        select auth_code from member
        where id=#{id}
    </select>

    <update id="updateAuthStatus">
        update member set auth_status=true where id=#{id}
    </update>

    <select id="findMemberById" resultType="com.rideshare.member.domain.Member">
        select m_id, id, pw, nickname, email, auth_code, auth_status, authority from member
        where id=#{id}
    </select>

    <select id="findMemberByMId" resultType="com.rideshare.member.domain.Member">
        select m_id, id, pw, nickname, email, auth_code, auth_status, authority from member
        where m_id=#{mId}
    </select>

    <select id="idCheck" resultType="boolean">
        select exists(select 1 from member where id=#{id});
    </select>

    <select id="emailCheck" resultType="boolean">
        select exists(select 1 from member where email=#{email});
    </select>

    <select id="nicknameCheck" resultType="boolean">
        select exists(select 1 from member where nickname=#{nickname});
    </select>

    <select id="getNoticeList" resultMap="partyAndPeople">
        select party.*, member.nickname from (
                select * from member_has_party where p_id in (
                    select p_id from member_has_party where m_id=#{mId} and is_writer=true)
                                               order by p_id desc) member_has_party
        join party on party.p_id=member_has_party.p_id
        join member on member_has_party.m_id=member.m_id
    </select>

    <select id="getParticipationList" resultMap="partyAndPeople">
        select party.*, member.nickname from (
            select * from member_has_party where p_id in (
                select p_id from member_has_party where m_id=#{mId} and is_writer=false) order by p_id desc) member_has_party
        join party on party.p_id=member_has_party.p_id
        join member on member_has_party.m_id=member.m_id
    </select>



    <resultMap id="partyAndPeople" type="com.rideshare.party.domain.Party">
        <id column="p_id" property="pId"/>
        <result column="type" property="type"/>
        <result column="start_date" property="startDate"/>
        <result column="start_time" property="startTime"/>
        <result column="start_point" property="startPoint"/>
        <result column="start_lat" property="startLat"/>
        <result column="start_lng" property="startLng"/>
        <result column="end_point" property="endPoint"/>
        <result column="current_headcnt" property="currentHeadcnt"/>
        <result column="total_headcnt" property="totalHeadcnt"/>
        <result column="is_confirm" property="isConfirm"/>
        <result column="is_finish" property="isFinish"/>
        <result column="car_number" property="carNumber"/>
        <result column="content" property="content"/>
        <collection property="people" ofType="java.lang.String" javaType="list">
            <result column="nickname"/>
        </collection>
    </resultMap>

    <update id="changeNickname" parameterType="map">
        update member set nickname=#{newNickname} where m_id=#{mId}
    </update>

    <update id="changePassword" parameterType="map">
        update member set pw=#{newPassword} where m_id=#{mId}
    </update>
</mapper>